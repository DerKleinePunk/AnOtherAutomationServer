cmake_minimum_required(VERSION 3.11 FATAL_ERROR)
# Main CMake

## Use the variable PROJECT_NAME for changing the target name
SET ( PROJECT_NAME "AutomationServer" )

PROJECT(${PROJECT_NAME}) ## Not Able to use CXX because C files are not compiled

#
# Debugging Options
#
if (CMAKE_BUILD_TYPE STREQUAL "Debug") 
    SET (CMAKE_VERBOSE_MAKEFILE 1) # Use 1 for debugging, 0 for release
ENDIF()

if(DEFINED ENV{VCPKG_ROOT} AND (NOT DEFINED CMAKE_TOOLCHAIN_FILE OR CMAKE_TOOLCHAIN_FILE MATCHES "$/scripts/buildsystems/vcpkg.cmake"))
  set(CMAKE_TOOLCHAIN_FILE "$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" CACHE STRING "Vcpkg toolchain file")
  set(VCPKG_VERBOSE ON)
  set(USE_VCPKG "yes" CACHE STRING "")
else()
  set(USE_VCPKG "no" CACHE STRING "")  
endif()

#Build Cmake Environment
SET(PKG_CONFIG_USE_CMAKE_PREFIX_PATH TRUE)
find_package(PkgConfig)
include(CheckCXXCompilerFlag)
include(ExternalProject)
include(CheckTypeSize)
include(CheckIncludeFiles)

MESSAGE(STATUS "Try Build ${PROJECT_NAME}")
message(STATUS "Compiler ${CMAKE_CXX_COMPILER_ID}")
message(STATUS "Building on ${CMAKE_SYSTEM_NAME}")
MESSAGE(STATUS "Build for ${TARGET}")
MESSAGE(STATUS "VCPKG ${USE_VCPKG} $ENV{VCPKG_ROOT} ${CMAKE_TOOLCHAIN_FILE} ${VCPKG_TARGET_TRIPLET}")

IF("${USE_VCPKG}" STREQUAL "yes")
  #set(CMAKE_FIND_DEBUG_MODE TRUE) Big big Log !
ENDIF()

#
# Project Output Paths
#
SET (MAINFOLDER ${PROJECT_SOURCE_DIR})
IF("${TARGET}" STREQUAL "")
   message(WARNING "TARGET not set please add -DTRAGET to command line Suported Target are Linux,PI (crosscompile)")
   SET(TARGET ${CMAKE_SYSTEM_NAME})
ENDIF()

IF("${CMAKE_EXPORT_COMPILE_COMMANDS}" STREQUAL "")
   SET(CMAKE_EXPORT_COMPILE_COMMANDS ON)
ENDIF()

SET (EXECUTABLE_OUTPUT_PATH "${MAINFOLDER}/bin/${TARGET}")
SET (LIBRARY_OUTPUT_PATH "${MAINFOLDER}/lib/${TARGET}")
SET (LIBS_DIR ${PROJECT_SOURCE_DIR}/libs/${TARGET})

MESSAGE(STATUS "Build to ${EXECUTABLE_OUTPUT_PATH}")

list(APPEND CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PROJECT_SOURCE_DIR}/cmake")

IF(CMAKE_COMPILER_IS_GNUCXX)
  CHECK_CXX_COMPILER_FLAG("-std=c++17" COMPILER_SUPPORTS_CXX17)
  IF(COMPILER_SUPPORTS_CXX17)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
  ELSE()
    message(WARNING "we need c++17 to build")
  ENDIF()
ENDIF()
CHECK_INCLUDE_FILE_CXX("time.h" HAVE_TIME_H)
check_type_size("time_t" SIZEOF_TIME_T LANGUAGE CXX)

IF(CMAKE_COMPILER_IS_GNUCXX)
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -DDEBUG")
ELSE()
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG")
ENDIF()

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DSIZEOF_TIME_T=${SIZEOF_TIME_T}")

IF(CMAKE_COMPILER_IS_GNUCXX)
  SET ( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-psabi -DELPP_THREAD_SAFE -DELPP_FEATURE_PERFORMANCE_TRACKING -DELPP_NO_DEFAULT_LOG_FILE -DELPP_STACKTRACE_ON_CRASH")
  #-DELPP_STACKTRACE_ON_CRASH only on linux with gcc
ELSE()
  SET ( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DELPP_THREAD_SAFE -DELPP_FEATURE_PERFORMANCE_TRACKING -DELPP_NO_DEFAULT_LOG_FILE")
ENDIF(CMAKE_COMPILER_IS_GNUCXX)

MESSAGE(STATUS "Compiler Flags are ${CMAKE_CXX_FLAGS}")
#
# Add Build Targets
#
#set(THREADS_PREFER_PTHREAD_FLAG ON)
#FIND_PACKAGE(Threads REQUIRED)

FIND_PACKAGE(SQLITE3 REQUIRED)
# FIND_PACKAGE(CURL REQUIRED)
FIND_PACKAGE(mosquitto REQUIRED)
FIND_PACKAGE(Python3 COMPONENTS Interpreter Development)
FIND_PACKAGE(OpenSSL REQUIRED)
#FIND_PACKAGE(GLIB REQUIRED)
IF(NOT ${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
  pkg_check_modules(NM REQUIRED libnm) #NetworkManager never Work on Windows
ENDIF()

MESSAGE(STATUS "CURL ${CURL_INCLUDE_DIR} ${CURL_LIBRARIES}")
MESSAGE(STATUS "mosquitto ${MOSQUITTO_INCLUDE_DIRS} ${MOSQUITTO_LIBRARIES}")
MESSAGE(STATUS "OpenSSL ${OPENSSL_INCLUDE_DIR} ${OPENSSL_LIBRARIES}")

MESSAGE(STATUS "Python3_FOUND:${Python3_FOUND}")
MESSAGE(STATUS "Python3_VERSION:${Python3_VERSION}")
MESSAGE(STATUS "Python3_LIBRARIES:${Python3_LIBRARIES}")
MESSAGE(STATUS "Python3_INCLUDE_DIRS:${Python3_INCLUDE_DIRS}")

INCLUDE_DIRECTORIES(${OPENSSL_INCLUDE_DIR})
#VCPKG is some Time Stupied
SET(OPENSSL_INCLUDE_DIRS ${OPENSSL_INCLUDE_DIR})

ADD_SUBDIRECTORY(dependencies)
ADD_SUBDIRECTORY(src)
# ADD_SUBDIRECTORY(tests)

OPTION(ENABLE_CPPCHECK "Enable cppcheck linter while compiling." ON)
if(ENABLE_CPPCHECK)
    include(cppcheckhelper)
    MESSAGE(STATUS "CMAKE_CXX_CPPCHECK ${CMAKE_CXX_CPPCHECK}")
    IF (NOT CMAKE_CXX_CPPCHECK)
        MESSAGE(FATAL_ERROR "please install CPPCHECK for better code :)")
    ENDIF()
ELSE()
    unset(CMAKE_CXX_CPPCHECK CACHE)
endif()

